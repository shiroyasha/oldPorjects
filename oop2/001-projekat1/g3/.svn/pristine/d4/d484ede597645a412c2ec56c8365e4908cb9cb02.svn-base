package server;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.rmi.NotBoundException;
import shared.AgentServerI;
import shared.MessageServerI;
import shared.Racer;
import shared.RacerPositionInfo;
import gui.ServerInfo;
import maze.Maze;
/**
 * 
 * @author Nikola Bosic (nikolabosic91@gmail.com)
 * 	v1.1  
 * 
 * 
 * Klasa Server predstavlja server koji moze da primi agenta 
 * Svaki server se registruje na RMI registar i generise svoj lavirint (vise info maze.Maze)
 * 
 * kada primi trkaca, prosledjuje mu svoj lavirint i svoje informacije
 * 
 */

public class Server extends UnicastRemoteObject implements AgentServerI{
	private static final long serialVersionUID = 1L;
	private Maze maze;
	
	// ServerInfo je tip koji sadrzi sve bitne osobine servera (ime, host i port), vise info u (gui.ServerInfo)
	private ServerInfo serverInfo;
	
	protected Server() throws RemoteException{
		super();
	}
	
	//konstruktor prima ime , port i host servera, i registruje ga na RMI registry.
	public Server(String serverName,String port) throws RemoteException{
		// TODO Server treba da generise svoj lavirint , maze= Maze.generateMaze();
		
		serverInfo=new ServerInfo(serverName,port,"localhost");
		Registry registry = LocateRegistry.createRegistry(Integer.parseInt(port));
		registry.rebind(serverName, this);
		System.out.println("Server "+serverName+" on port "+port+" created");
	}	
	
	// kada server primi trkaca(Racer), prvo javi glavnom serveru pozicuju trkaca, a trkacu salje svoju matricu
	// nakon toga salje trkaca na sledeci server sa liste
	@Override
	public void recieveRacer(Racer racer) throws RemoteException,NotBoundException,InterruptedException{
		sendMessage(racer);
		racer.doJob(maze);
		sendRacer(racer);
	}	
	
	/*
	 * objekat tipa RacerPositionInfo sakuplja sve potrebne informacije o trenutnoj poziciji servera,
	 * te informacije se pakuju i salju glavnom serveru
	 */
	public void sendMessage(Racer racer) throws RemoteException{
		try{
			Registry registry = LocateRegistry.getRegistry(racer.getMainServer().host, Integer.parseInt(racer.getMainServer().port));
	   	 	MessageServerI serverMSG = (MessageServerI) registry.lookup(racer.getMainServer().name);
	   	 	serverMSG.messageRecieved(new RacerPositionInfo(racer.getRacerId(),serverInfo,racer.getServerList().isEmpty()));
	   	 	
		 } catch (NotBoundException nbe){
			 System.out.println(" lookup error ");
		 }
	}
	

	public void sendRacer(Racer racer) throws RemoteException{
		if (!racer.getServerList().isEmpty()){
			try{
				ServerInfo nextServer=racer.getNextServer();
				racer.removeServer();
				Registry registry = LocateRegistry.getRegistry(nextServer.host, Integer.parseInt(nextServer.port));
				AgentServerI serverCP = (AgentServerI) registry.lookup(nextServer.name);
				serverCP.recieveRacer(racer);	
			} catch (NotBoundException nbe){
				sendRacer(racer);
			} catch (InterruptedException ie){
			
			}
		}
	}
	
}
