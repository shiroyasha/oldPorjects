package microfb.server;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.UUID;

import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import microfb.client.services.MicroFBService;
import microfb.server.entities.Korisnik;
import microfb.server.entities.Slike;
import microfb.shared.Validator;
import microfb.shared.IO.AktivnostIO;
import microfb.shared.IO.ImageIO;
import microfb.shared.IO.KorisnikIO;
import microfb.shared.IO.TypeIO;
import microfb.shared.exceptions.LogedOutException;

import com.google.gwt.core.client.GWT;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;


public class Service extends RemoteServiceServlet implements MicroFBService {

	private static final long serialVersionUID = 1L;
	

	private boolean loggedIn(String sessionID)
	{
		return EntityHelper.sessionIDExists("sessionID");
	}
	

	@Override
	public String login(String mail, String password) throws IllegalArgumentException {
		String sessionID = EntityHelper.getSessionID(mail);
		
		if( !sessionID.equals("") ) return sessionID;
		
		sessionID = UUID.randomUUID().toString();
		try
		{
			EntityHelper.setSessionID( mail, sessionID );
		}catch(Exception e)
		{
			GWT.log("set sessionID failed", e);
		}
		return sessionID;
	}

	@Override
	public void logout(String sessionID) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		
		try 
		{
			EntityHelper.setSessionID( EntityHelper.getKorisnikBySessionId(sessionID).getEmail() , "" );
		}catch(Exception e)
		{
			GWT.log("set sessionID failed", e);
		}
	}

	public static void sendMail( String email, String subject, String msgBody ) throws IllegalArgumentException
	{
		try
		{
			Properties props = new Properties();
			Session session = Session.getDefaultInstance(props, null);
				
			Message msg = new MimeMessage(session);
			
			msg.setFrom(new InternetAddress("milosmns@gmail.com", "MicroFB"));
			msg.addRecipient(Message.RecipientType.TO, new InternetAddress(email, email));

			msg.setSubject(subject);
			msg.setText(msgBody);
				
			Transport.send(msg);
		} catch (Exception ex)
		{
			GWT.log("Error while sending an e-mail to '" + email + "'", ex);
			throw new IllegalArgumentException("greska sa mailom");
		}
	}

	
	@Override
	public void register(String email, String password, String name, String birthdate, 
			                String city, String workplace, String quote, String sex ) throws IllegalArgumentException {
		
		if( !Validator.email(email) ) throw new IllegalArgumentException("not a valid email");
		if( !Validator.password(password) ) throw new IllegalArgumentException("not a valid password");
		
		if( EntityHelper.userExists(email) ) throw new IllegalArgumentException("user with that email already exists");
		
		String actCode = UUID.randomUUID().toString();
		
		try {
			
			sendMail(email, "MicroFB User Registration",
					"Dear User,\n\n" +
					"Thank you for registering with our service!\n\n" +
					"In order to complete the registration procedure, please visit the following link:\n\n" +
					"http://mikrofejs.appspot.com/activation?code=" + actCode + "\n\n" +
					"The link will expire in 24h. After that, you will have to repeat the registration procedure.\n\n" +
					"Thank you once again for choosing our service!");
			
			EntityHelper.createNewKorisnik( email, password,name, birthdate, city, workplace, quote,sex, actCode );

					
		} catch (Exception e) {
			GWT.log("create new korisnik failed", e);
			//throw new IllegalArgumentException("FATAL ERROR when creating user");
		}
		
	}
	
	

	@Override
	public KorisnikIO getKorisnik(String sessionID) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		
		Korisnik k = EntityHelper.getKorisnikBySessionId(sessionID);
		
		if( k == null ) throw new IllegalArgumentException("no user with that sessionID");
		
		return new KorisnikIO( k.getName(),k.getPassword(),k.getEmail(),
                				k.getBirthdate().toString(),k.getCity(),
                				k.getWorkplace(),k.getQuote(),k.getSex());
	}
	
	

	@Override
	public List<KorisnikIO> getAllKorisnik(String sessionID) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		
		List<KorisnikIO> lista = new ArrayList<KorisnikIO>();
		
		for( Korisnik k : EntityHelper.getAllKorisnik() )
			lista.add( new KorisnikIO( k.getName(),k.getPassword(),k.getEmail(),
	                   k.getBirthdate().toString(),k.getCity(),
	                   k.getWorkplace(),k.getQuote(),k.getSex()));
		
		return lista;
	}
	
	

	@Override
	public List<KorisnikIO> searchForKorisnik(String sessionID, String queryString) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		
		List<KorisnikIO> lista = new ArrayList<KorisnikIO>();
		
		for( Korisnik k : EntityHelper.findKirisnikByQueryString(queryString) )
			lista.add( new KorisnikIO( k.getName(),k.getPassword(),k.getEmail(),
					                   k.getBirthdate().toString(),k.getCity(),
					                   k.getWorkplace(),k.getQuote(),k.getSex()));
		
		return lista;
	}
	
	

	@Override
	public void updateKorisnik(String sessionID, KorisnikIO korisnik) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		
		//EntityHelper.updateKorinik(korisnik);
	}
	

	@Override
	public void setCoverPhoto(String sessionID, ImageIO photo) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		
		Korisnik k = EntityHelper.getKorisnikBySessionId(sessionID);
		EntityHelper.setCoverPhoto( k.getEmail() , photo);
		
	}

	@Override
	public void setProfilePhoto(String sessionID, ImageIO photo) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();

		Korisnik k = EntityHelper.getKorisnikBySessionId(sessionID);
		EntityHelper.setProfilePhoto( k.getEmail() , photo);	
	}

	@Override
	public ImageIO getCoverPhoto(String sessionID) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		
		Korisnik k = EntityHelper.getKorisnikBySessionId(sessionID);
		Slike slika = EntityHelper.getSlike( k.getEmail() );
		
		if( slika == null ) {}//TODO
		return null;
	}

	@Override
	public ImageIO getProfilePhoto(String sessionID) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();

		Korisnik k = EntityHelper.getKorisnikBySessionId(sessionID);
		Slike slika = EntityHelper.getSlike( k.getEmail() );
		
		if( slika == null ) {}//TODO
		return null;
	}
	
	


	@Override
	public List<AktivnostIO> getWallItems(String sessionID, int from, int count, boolean onlyPersonal) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<AktivnostIO> getWallItemsForKorisnik(String sessionID, KorisnikIO korisnikIO, int from, int count, boolean onlyPersonal) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean post(String sessionID, String value, TypeIO tip) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean updatePost(String sessionID, AktivnostIO aktivnostIO, String value, TypeIO tip) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deletePost(String sessionID, AktivnostIO aktivnostIO) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean likeEnabled(String sessionID, AktivnostIO aktivnostIO) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean like(String sessionID, AktivnostIO aktivnostIO) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean unlike(String sessionID, AktivnostIO aktivnostIO) throws IllegalArgumentException {
		if( !loggedIn(sessionID) ) throw new LogedOutException();
		// TODO Auto-generated method stub
		return false;
	}

}
