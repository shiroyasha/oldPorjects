package microfb.server;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItemIterator;
import org.apache.commons.fileupload.FileItemStream;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

public class UploadServlet extends HttpServlet
{
	private static final long serialVersionUID = 1L;
	
	@Override
	public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException
	{

		String sessionID = req.getParameter("sessionID");
		String email = req.getParameter("email");
		String type = req.getParameter("type");
		
		if( sessionID == null || email == null || type == null ) throw new IOException("wrong arguments");
		
		if( !Service.loggedIn(sessionID) ) throw new IOException("not logged in");

		try
		{
			byte[] slika = EntityHelper.getPhoto( email, type );
			System.out.println("prikaz slike " + ( slika == null) );
			if( slika != null)
			{
				resp.getOutputStream().write(slika);
			}
			else if( type.equals("profile") )
			{

				resp.sendRedirect("/images/no-profile-img.gif");
			}
			
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		String sessionID = req.getParameter("sessionID");
		String email = req.getParameter("email");
		String type = req.getParameter("type");
		
		if( sessionID == null || email == null || type == null ) throw new IOException("wrong arguments");
		
		if( !Service.loggedIn(sessionID) ) throw new IOException("not logged in");
		
		ServletFileUpload upload = new ServletFileUpload();

		try{
			FileItemIterator iter = upload.getItemIterator(req);

			while (iter.hasNext()) {
				FileItemStream item = iter.next();

				String name = item.getFieldName();
				InputStream stream = item.openStream();


				// Process the input stream
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				int len;
				byte[] buffer = new byte[8192];
				while ((len = stream.read(buffer, 0, buffer.length)) != -1) {
					out.write(buffer, 0, len);
				}

				int maxFileSize = 2*(1024*1024); //2 megs max 
				if (out.size() > maxFileSize) { 
					throw new RuntimeException("File is > than " + maxFileSize);
				}
				
				EntityHelper.setPhoto( sessionID, out.toByteArray(), type );
			}
		}
		catch(Exception e){
			throw new RuntimeException(e);
		}
	}
}
