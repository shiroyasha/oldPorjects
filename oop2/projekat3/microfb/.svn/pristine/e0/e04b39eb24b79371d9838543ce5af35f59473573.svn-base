package microfb.client.pages;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

import microfb.client.FBEntryPoint;
import microfb.client.services.MicroFBServiceAsync;

import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.Widget;


public abstract class AbstractPage {

	private RootPanel page;
	private ArrayList<Widget> elements;
	protected HashMap<String, RootPanel> panels;
	protected String style;
	protected MicroFBServiceAsync service;

	public AbstractPage(RootPanel page, String style) {
		super();
		elements = new ArrayList<Widget>();
		this.page = page;
		this.style = style;
		panels = FBEntryPoint.panels;
		this.service = FBEntryPoint.service;
		
		clearAllPanels();
		
		stylePage(style);
		defineElements();
		addElements();
	}

	private void addElements() {
		for (Widget w : elements)
			page.add(w);
	}
	
	private void stylePage(String style) {
		page.removeStyleName("invisible");
		if (!style.contains(";;"))
			page.addStyleName(style);
		else {
			String[] styles = style.split(";;");
			if (styles.length == 1)
				page.addStyleName(styles[0]);
			else
				for (String s : styles)
					page.addStyleName(s);
		}
	}
	
	private void clearAllPanels() {
		Set<Entry<String, RootPanel>> set = panels.entrySet();
		Iterator<Entry<String, RootPanel>> i = set.iterator();
		while (i.hasNext()) {
			Entry<String, RootPanel> entry = i.next();
			entry.getValue().setStyleName("invisible");
			entry.getValue().clear();
		}
	}

	protected void addElement(Widget w) {
		elements.add(w);
	}

	protected String loggedIn() {
		if (FBEntryPoint.sessionID == null || FBEntryPoint.sessionID.equals(""))
			return null;
		else
			return FBEntryPoint.sessionID;
	}
	
	protected void logIn(String sessionID) {
		FBEntryPoint.sessionID = sessionID;
		// TODO add cookie
		new HomePage(panels.get("homePage"), "homePage");
	}
	
	protected void logOut() {
		if (loggedIn() != null) {
			service.logout(FBEntryPoint.sessionID, new AsyncCallback<Void>() {
				@Override
				public void onSuccess(Void result) {}
				@Override
				public void onFailure(Throwable caught) {System.out.println(caught.getMessage());}
			});
			FBEntryPoint.sessionID = "";
			// TODO remove cookie
		}
		new DialogPage(panels.get("dialogPage"), "dialogPage");
	}
	
	protected abstract void defineElements();
}