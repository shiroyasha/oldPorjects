package microfb.client.widgets;

import microfb.client.FBEntryPoint;
import microfb.client.pages.HomePage;
import microfb.client.services.MicroFBServiceAsync;
import microfb.shared.Utilities;
import microfb.shared.IO.AktivnostIO;
import microfb.shared.exceptions.LogedOutException;

import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTML;
import com.google.gwt.user.client.ui.Widget;

public class WallChild extends Widget {
	
	private AktivnostIO a;
	private FlowPanel c;
	private MicroFBServiceAsync service;
	private HomePage page;
	
	public WallChild(AktivnostIO a, MicroFBServiceAsync service, HomePage page) {
		super();
		this.a = a;
		this.page = page;
		this.service = service;
		c = new FlowPanel();
		c.addStyleName("wallChildContainer");
		loadContainer();
	}
	
	private void loadContainer() {
		c.clear();
		
		c.add(new HTML("<strong>" + a.getFrom() + "</strong>: " +
					   "<span style=\"color: black;\">" + a.getValue() + "</span>"));
		c.add(new HTML("Time: " + Utilities.generateFuzzyTime(System.currentTimeMillis(), a.getTime())));
		
		final ButtonFB like = new ButtonFB("Like (" + a.getLikes() + ")");
		like.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				service.like(FBEntryPoint.sessionID, a.getId(), new AsyncCallback<Void>() {
					@Override
					public void onFailure(Throwable caught) {
						if (caught instanceof LogedOutException)
							page.logOut();
					}
					@Override
					public void onSuccess(Void result) {
						like.setVisible(false);
					}
				});
			}
		});
		c.add(like);
		
		final ButtonFB dislike = new ButtonFB("Dislike (" + a.getDislikes() + ")");
		dislike.addClickHandler(new ClickHandler() {
			@Override
			public void onClick(ClickEvent event) {
				service.unlike(FBEntryPoint.sessionID, a.getId(), new AsyncCallback<Void>() {
					@Override
					public void onFailure(Throwable caught) {
						if (caught instanceof LogedOutException)
							page.logOut();
					}
					@Override
					public void onSuccess(Void result) {
						dislike.setVisible(false);
					}
				});
			}
		});
		c.add(dislike);
	}
	
	public FlowPanel getData() {
		return c;
	}	
}
